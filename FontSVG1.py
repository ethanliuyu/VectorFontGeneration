# 获得文字的PNG和对应的数组from fontTools import ttLibfrom fontTools.pens.svgPathPen import SVGPathPenfrom fontTools.misc import transformfrom fontTools.pens.transformPen import TransformPenimport refrom cairosvg import svg2png  # 用于将 SVG 转换为 PNGimport numpy as npimport randomfontName = "./newFont/HYYakuHei-95W.ttf"font = ttLib.TTFont(fontName)  # Load an existing font fileprint(font['maxp'].numGlyphs, font['OS/2'].achVendID, font['head'].unitsPerEm)def ntos(value):    return str(int(round(value)))unitsPerEm = font['head'].unitsPerEmttf2em = transform.Identity.scale(1 / unitsPerEm, 1 / unitsPerEm)svgPerEm = 180xform = transform.Identity.translate(20, svgPerEm).scale(svgPerEm, -svgPerEm).transform(ttf2em)cmap = font["cmap"].getBestCmap()def format_svg_path(path):    # 在字母和数字之间插入空格    path = re.sub(r'(\d)([A-Za-z])', r'\1 \2', path)    path = re.sub(r'([A-Za-z])(\d)', r'\1 \2', path)    return pathdef glyph_to_svg(svgPath):    # 构造 SVG 文件内容字符串    svg_content = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n'    svg_content += f'<svg xmlns="http://www.w3.org/2000/svg" width="224" height="224" viewBox="0 0 224 224">\n'    svg_content += f'<g transform="matrix(1 0 0 1 0 0)">\n'    svg_content += f'<path d="{svgPath}"/>\n'    svg_content += '</g>\n</svg>\n'    return svg_contentdef svg2Numpy(svgPath,cmdLen):    #在开始的时候添加开始指令 开始指令为7    arrlist = []    flag=True #是否为遇到的第一个M命令    arr = np.ones((12)) * -1  # 创建一个全部是负一的矩阵    arr[0]=7    arrlist.append(arr)    # 将路径解析为一系列指令和参数    commands = re.findall(r'([A-Za-z])([^A-Za-z]*)', svgPath)    for cmd, args in commands:        arr = np.ones((12)) * -1 #创建一个全部是负一的矩阵        #arr = np.zeros((12))  # 创建一个全部是0的矩阵        args = list(map(int, args.split()))        if cmd == 'M':            x = args[0]            y = args[1]            arr[0] = 1  # 第一位记录 cmd            if not flag:                arr[3] = targs[-2]  # 第三位记录上一个点的x值                arr[4] = targs[-1]  # 第三位记录上一个点的y值                flag=False #将首次标记记录为 False            else:                arr[3] = x  # 第三位记录上一个点的x值 如果是第一次那就认为是当前点即可                arr[4] = y  # 第三位记录上一个点的y值            arr[9] = x            arr[10] = y            targs = args            arrlist.append(arr)            continue        elif cmd == 'H':  # 如果是H 需要获取去出上一个点的坐标纵坐标            x = args[0]            y = targs[1]            arr[0] = 2            arr[3] = targs[-2]  # 第三位记录上一个点的x值            arr[4] = targs[-1]  # 第三位记录上一个点的y值            arr[9] = x            arr[10] = y            targs = [x, y]            arrlist.append(arr)            continue        elif cmd == 'V':  # 如果是H 需要获取去出上一个点的坐标纵坐标            x = targs[0]            y = args[0]            arr[0] = 3            arr[3] = targs[-2]  # 第三位记录上一个点的x值            arr[4] = targs[-1]  # 第三位记录上一个点的y值            arr[9] = x            arr[10] = y            targs = [x, y]            arrlist.append(arr)            continue        elif cmd == 'L':            x, y = args            arr[0] = 4            arr[3] = targs[-2]  # 第三位记录上一个点的x值            arr[4] = targs[-1]  # 第三位记录上一个点的y值            arr[9] = x            arr[10] = y            targs = args            arrlist.append(arr)            continue        elif cmd == 'Q':            x1, y1, x2, y2 = args            arr[0] = 5            arr[3] = targs[-2]  # 第三位记录上一个点的x值            arr[4] = targs[-1]  # 第三位记录上一个点的y值            arr[7] = x1            arr[8] = y1            arr[9] = x2            arr[10] = y2            targs = args            arrlist.append(arr)            continue        elif cmd == 'Z':            x = targs[-2]            y = targs[-1]            arr[0] = 6            arr[3] = targs[-2]  # 第三位记录上一个点的x值            arr[4] = targs[-1]  # 第三位记录上一个点的y值            arr[9] = x            arr[10] = y            targs = args            arrlist.append(arr)            continue        else:            targs = args            print("ERROR")    #将所有的数组构建为相同的长度    if len(arrlist) < cmdLen:        temp=np.ones((12)) * -1        temp[0]=0        arrlist += [temp] * (cmdLen- len(arrlist))    else:        arrlist = arrlist[:cmdLen]        print("截断", len(arrlist))    print("command_len",len(arrlist))    return arrlist#将矩阵恢复为SVGdef optimize_svg(arr):    path_dict = {        1: "\nM {} {} ",        2: "\nH {} ",        3: "\nV {} ",        4: "\nL {} {} ",        5: "\nQ {} {} {} {} ",        6: "\nZ ",        7: "",        0: ""    }    svg = ""    for temp in arr:        cmd = path_dict[temp[0]]        if temp[0] == 1:            svg += cmd.format(int(temp[9]), int(temp[10]))        elif temp[0] == 2:            svg += cmd.format(int(temp[9]))        elif temp[0] == 3:            svg += cmd.format(int(temp[10]))        elif temp[0] == 4:            svg += cmd.format(int(temp[9]), int(temp[10]))        elif temp[0] == 5:            svg += cmd.format(int(temp[7]), int(temp[8]), int(temp[9]), int(temp[10]))        elif temp[0] == 6:            svg += cmd    print(svg)    return svgimport osdef fromChar2SVG(charList,numpyPath,pngPath,cmdLen):    if not os.path.exists(numpyPath):  # 判断路径是否存在        os.makedirs(numpyPath)  # 使用os模块创建路径    if not os.path.exists(pngPath):  # 判断路径是否存在        os.makedirs(pngPath)  # 使用os模块创建路径    for char in charList:        print(char)        g = cmap[ord(char)]        glyph = font.getGlyphSet()[g]        p = SVGPathPen(font.getGlyphSet()[g], ntos=ntos)        tp = TransformPen(p, xform)        glyph.draw(tp)        # 获取字符的 Unicode 码点，并将其转换为十六进制字符串        unicode_hex = hex(ord(char))[2:]        # 构造输出文件路径        output_path =pngPath+f"{unicode_hex}.svg"        # 调用 glyph_to_svg 函数获取 SVG 内容，并将其写入到指定的输出文件中        path = format_svg_path(p.getCommands())        svg_data = glyph_to_svg(path)        with open(output_path, "w") as f:            f.write(svg_data)        print(path)        arr = svg2Numpy(path,cmdLen) #构建Numpy数组        svgpath=optimize_svg(arr) #将数组转为路径        svg_data = glyph_to_svg(svgpath)        output_path = pngPath + f"new{unicode_hex}.svg"        with open(output_path, "w") as f:            f.write(svg_data)if __name__ == "__main__":    charList = "一乙二十丁厂七卜人入八九几儿了力乃刀又三于干亏士工土才寸下大丈与万上小口巾山千乞川亿个勺久凡及夕丸么广亡门义之尸弓己已子卫也女飞刃习叉马乡" \               "丰王井开夫天无元专云扎艺木五支厅不太犬区历尤友匹车巨牙屯比互切瓦止少日中冈贝内水见午牛手毛气升长仁什片仆化仇币仍仅斤爪反介父从今凶分乏公仓月氏勿欠风丹匀乌凤勾文六方火为斗忆订计户认心尺引丑巴孔队办以允予劝双书幻" \               "玉刊示末未击打巧正扑扒功扔去甘世古节本术可丙左厉右石布龙平灭轧东卡北占业旧帅归且旦目叶甲申叮电号田由史只央兄叼叫另叨叹四生失禾丘付仗代仙们仪白仔他斥瓜乎丛令用甩印乐句匆册犯外处冬鸟务包饥主市立闪兰半汁汇头汉宁穴它讨写让礼训必议讯记永司尼民出辽奶奴加召皮边发孕圣对台矛纠母幼丝" \               "式刑动扛寺吉扣考托老执巩圾扩扫地扬场耳共芒亚芝朽朴机权过臣再协西压厌在有百存而页匠夸夺灰达列死成夹轨邪划迈毕至此贞师尘尖劣光当早吐吓虫曲团同吊吃因吸吗屿帆岁回岂刚则肉网年朱先丢舌竹迁乔伟传乒乓休伍伏优伐延件任伤价份华仰仿伙伪自血向似后行舟全会杀合兆企众爷伞创肌朵杂危旬旨负各名多争色壮冲冰庄庆亦刘齐交次衣产决充妄闭问闯羊并关米灯州汗污江池汤忙兴宇守宅字安讲军许论农讽设访寻那迅尽导异孙阵阳收阶阴防奸如妇好她妈戏羽观欢买红纤级约纪驰巡" \               "寿弄麦形进戒吞远违运扶抚坛技坏扰拒找批扯址走抄坝贡攻赤折抓扮抢孝均抛投坟抗坑坊抖护壳志扭块声把报却劫芽花芹芬苍芳严芦劳克苏杆杠杜材村杏极李杨求更束豆两丽医辰励否还歼来连步坚旱盯呈时吴助县里呆园旷围呀吨足邮男困吵串员听吩吹呜吧吼别岗帐财针钉告我乱利秃秀私每兵估体何但伸作伯伶佣低你住位伴身皂佛近彻役返余希坐谷妥含邻岔肝肚肠龟免狂犹角删条卵岛迎饭饮系言冻状亩况床库疗应冷这序辛弃冶忘闲间闷判灶灿弟汪沙汽沃泛沟没沈沉怀忧快完宋宏牢究穷灾良证启评补初社识诉诊词译君灵即层尿尾迟局改张忌际陆阿陈阻附妙妖妨努忍劲鸡驱纯纱纳纲驳纵纷纸纹纺驴纽" \               "奉玩环武青责现表规抹拢拔拣担坦押抽拐拖拍者顶拆拥抵拘势抱垃拉拦拌幸招坡披拨择抬其取苦若茂苹苗英范直茄茎茅林枝杯柜析板松枪构杰述枕丧或画卧事刺枣雨卖矿码厕奔奇奋态欧垄妻轰顷转斩轮软到非叔肯齿些虎虏肾贤尚旺具果味昆国昌畅明易昂典固忠咐呼鸣咏呢岸岩帖罗帜岭凯败贩购图钓制知垂牧物乖刮秆和季委佳侍供使例版侄侦侧凭侨佩货依的迫质欣征往爬彼径所舍金命斧爸采受乳贪念贫肤肺肢肿胀朋股肥服胁周昏鱼兔狐忽狗备饰饱饲变京享店夜庙府底剂郊废净盲放刻育闸闹郑券卷单炒炊炕炎炉沫浅法泄河沾泪油泊沿泡注泻泳泥沸波泼泽治怖性怕怜怪学宝宗定宜审宙官空帘实试郎诗肩房诚衬衫视话诞询该详建肃录隶居届刷屈弦承孟孤陕降限妹姑姐姓始驾参艰线练组细驶织终驻驼绍经贯" \               "奏春帮珍玻毒型挂封持项垮挎城挠政赴赵挡挺括拴拾挑指垫挣挤拼挖按挥挪某甚革荐巷带草茧茶荒茫荡荣故胡南药标枯柄栋相查柏柳柱柿栏树要咸威歪研砖厘厚砌砍面耐耍牵残殃轻鸦皆背战点临览竖省削尝是盼眨哄显哑冒映星昨畏趴胃贵界虹虾蚁思蚂虽品咽骂哗咱响哈咬咳哪炭峡罚贱贴骨钞钟钢钥钩卸缸拜看矩怎牲选适秒香种秋科重复竿段便俩贷顺修保促侮俭俗俘信皇泉鬼侵追俊盾待律很须叙剑逃食盆胆胜胞胖脉勉狭狮独狡狱狠贸怨急饶蚀饺饼弯将奖哀亭亮度迹庭疮疯疫疤姿亲音帝施闻阀阁差养美姜叛送类迷前首逆总炼炸炮烂剃洁洪洒浇浊洞测洗活派洽染济洋洲浑浓津恒恢恰恼恨举觉宣室宫宪突穿窃客冠语扁袄祖神祝误诱说诵垦退既屋昼费陡眉孩除险院娃姥姨姻娇怒架贺盈勇怠柔垒绑绒结绕骄绘给络骆绝绞统" \               "耕耗艳泰珠班素蚕顽盏匪捞栽捕振载赶起盐捎捏埋捉捆捐损都哲逝捡换挽热恐壶挨耻耽恭莲莫荷获晋恶真框桂档桐株桥桃格校核样根索哥速逗栗配翅辱唇夏础破原套逐烈殊顾轿较顿毙致柴桌虑监紧党晒眠晓鸭晃晌晕蚊哨哭恩唤啊唉罢峰圆贼贿钱钳钻铁铃铅缺氧特牺造乘敌秤租积秧秩称秘透笔笑笋债借值倚倾倒倘俱倡候俯倍倦健臭射躬息徒徐舰舱般航途拿爹爱颂翁脆脂胸胳脏胶脑狸狼逢留皱饿恋桨浆衰高席准座脊症病疾疼疲效离唐资凉站剖竞部旁旅畜阅羞瓶拳粉料益兼烤烘烦烧烛烟递涛浙涝酒涉消浩海涂浴浮流润浪浸涨烫涌悟悄悔悦害宽家宵宴宾窄容宰案请朗诸读扇袜袖袍被祥课谁调冤谅谈谊剥恳展剧屑弱陵陶陷陪娱娘通能难预桑绢绣验继"    charList = "大丁人托吞运"    sample_dir="000"    numpyPath="./data/"+sample_dir+"/numpy/"    pngPath="./data/"+sample_dir+"/image/"    cmdLen=784    fromChar2SVG(charList,numpyPath,pngPath,cmdLen)#HYYouYuan-55W.ttf #英文的第一个字体#HYZhuZiWanJuPaiDuiW.ttf 英文第二个字体#HYTaoZaiZiW.ttf  英文第三个字体